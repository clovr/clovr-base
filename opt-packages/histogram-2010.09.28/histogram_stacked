#!/usr/bin/perl
#*********************************************************************
#  histogram_stacked*
#  author: james robert white, james.dna.white@gmail.com
#  created: September 28, 2010

#  *This is a program designed to create a stacked histogram
#  figure from R. 
#  We'll assume for now that the matrix is consistent with
#  dimensions 25x50 or less. 
#*********************************************************************
use POSIX qw(ceil floor);
use Data::Dumper;
use Getopt::Std;
use warnings;
#*********************************************************************

use vars qw/$opt_F $opt_P/;
getopts("F:P:");
my $usage =
".USAGE.   
./histogram_stacked -F <tab delimited matrix> -P <prefix>

.DESCRIPTION.
histogram_stacked is a program designed to create a stacked histogram from count
data using the R package gplots. The output figure will only support up to 
25 rows and 50 columns.
  
.OPTIONS.
  -F tab delimited matrix file\
  -P output prefix\
    
.KEYWORDS. 
R, histogram
\n";

die $usage unless defined $opt_F
              and defined $opt_P;

my $matrixfile = $opt_F;
my $prefix    = $opt_P;



# first sanity check the file, make sure 
# 1. the names are good
# 2. the tab delimited format works
# 3. there aren't too many features for the visualization
# 4. there aren't too many samples for the visualization
# 5. the elements are integers and not something else

my $numsamples    = 0;
my $numfeatures   = 0;
my $numheadtitles = 0;
print "Performing sanity check of matrix file...\n";
open IN, "$matrixfile" or die "Cannot open your matrix file: $matrixfile!!\nGoodbye.\n";
my $ck = 0;
my $row = 1;
while(<IN>){
  chomp($_);
  my @A = split "\t", $_;
  if ($ck == 0){
    if ($A[0] ne ""){
      die "In your matrix file, the first element of the header row must be blank.\nGoodbye.\n";
    }
    $numheadtitles = $#A;
    for my $i (1 .. $#A){
      if (length($A[$i]) > 20){
        print "*Warning* Column $i has an oftly long header title...\n";
      }
    }
    $ck++; # done with the header line
    next;
  }else{
    if ($#A != $numheadtitles){
      die "*Warning* Matrix is inconsistent @ row $row ...\nGoodbye.\n";
    }
    if (length($A[0]) > 30){
      print "*Warning* Row $row has an oftly long feature name...\n";
    }
    for my $i (1 .. $#A){ # for each element in this row
      if ($A[$i] !~ /^\s*[\+\-]?\d+\s*$/){
        die "*Warning* Matrix is inconsistent @ row $row ...\nGoodbye.\n";
      }
      if ($A[$i] < 0){
        die "*Warning* Row $row has a negative number in it...\nGoodbye.\n";
      }
      if ($A[$i] < 0){
        die "*Warning* Row $row has a negative number in it...\nGoodbye.\n";
      }
    }
    $row++;
  }  
}
close IN;

$numfeatures = $row-1;
$numsamples  = $numheadtitles;
print 
"\n**Sanity check passed:
Filename: $matrixfile
Total number of features (rows): $numfeatures 
Total number of samples (columns): $numsamples
\n";

if ($numfeatures > 25){
  print "Apologies ~ There are too many features to continue creating this barchart. Try examining the output tables to find interesting features.\n";
  exit(0);
}
if ($numsamples > 50){
  print "Apologies ~ There are too many samples to continue creating this barchart. Try examining the output tables to find interesting features.\n";
 exit(0);
}


print "\n**Calling R to create figure...\n";
open OUT, ">$prefix\.in" or die "Can't open temp file $prefix.in!\n";
my $infile = "$matrixfile"; 
my $outfile = "$prefix.pdf";
print OUT 
"barstack <- function(infile, outfile){

  library(\"gplots\")
  library(\"RColorBrewer\")

  Counts <- read.table(infile, header = TRUE, sep = \"\t\");
  A <- Counts[2:ncol(Counts)];
  nrows = nrow(A);
  ncols = ncol(A);
  C <- array(0, dim=c(nrows,ncols));
  for (i in 1:nrows){
    for (j in 1:ncols){
          C[i,j] = A[i,j];
        }
  }
  samp_names <- names(Counts);
  colnames(C) <- samp_names[2:length(samp_names)];
  rownames(C) <- Counts[,1];


  Cnormed <- array(0, dim=c(nrows,ncols));
  for (i in 1:nrows){
    for (j in 1:ncols){
      Cnormed[i,j] = 100*(C[i,j]/sum(C[,j]));
    }
  }

  print(Cnormed)
  colnames(Cnormed) <- colnames(C);
  rownames(Cnormed) <- rownames(C);
  COLORS = rainbow(nrows);
  pdf(outfile);
  xinset = par()\$pin[1] + par()\$mar[4] + par()\$mar[2] + ncols;

  if (ncols <= 17){
    xinset = par()\$pin[1] + par()\$mar[4] + par()\$mar[2] + ncols/2;
  }
  if (ncols <= 12){
    xinset = par()\$pin[1] + par()\$mar[4] + par()\$mar[2] + ncols/4;
  }
  if (ncols <= 8){
    xinset =  par()\$mar[4] + par()\$mar[2] + ncols/2;
  }
  if (ncols <= 6){
    xinset =  par()\$mar[4] + par()\$mar[2] + ncols/5;
  }
  if (ncols == 4){
    xinset = par()\$mar[4]+2.9;
  }
  if (ncols == 3){
    xinset = par()\$mar[4]+1.75;
  }
  if (ncols == 2){
    xinset = par()\$mar[4]+0.75;
  }
  if (ncols == 1){
    xinset = par()\$mar[4]-0.75;  
  }
  par(lwd=1, xpd=T, mar=par()\$mar+c(10, 0, 0, 15), cex=1);
  namescex = 1;
  if (ncols > 15){
    namescex = 0.5;
  }
  if(ncols > 35){
    namescex = 0.3;
  }
  lcex = 0.8;
  if(nrows > 15){
    lcex = 0.5;
  }
  if(nrows > 35){
    lcex = 0.3;
  }

  barplot2(Cnormed, ylab=\"% of hits\", col=COLORS, las=2, axis.lty=1, cex.name=namescex);
  legend(x=xinset, y=90, legend=rev(rownames(Cnormed)), fill=rev(COLORS), cex=lcex);
  dev.off()
}

barstack(\"$infile\", \"$outfile\")\n";

close OUT;

#  run R batch template
#********************************************************************
system("R CMD BATCH $prefix\.in $prefix\.out"); 
system("rm $prefix\.in $prefix\.out");

