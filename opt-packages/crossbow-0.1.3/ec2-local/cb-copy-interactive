#!/bin/sh

#
# cb-copy-interactive
#
# Authors: Ben Langmead and Michael C. Schatz
#    Date: 9/26/2009
#
# Guides the user through setting up a bulk copy / preprocessing EC2
# job.
#

d=`dirname $0`

if ! which ec2-describe-instances ; then
	echo "Error: Could not find ec2-describe-instances tool in the PATH; please check that"
	echo "the Amazon EC2 command-line tools are installed properly"
	exit 1
fi
if ! which ec2-run-instances ; then
	echo "Error: Could not find ec2-run-instances tool in the PATH; please check that"
	echo "the Amazon EC2 command-line tools are installed properly"
	exit 1
fi

echo
echo "This script guides you through the process of copying and preprocessing FASTQ"
echo "short read data into Amazon's Simple Storage Service (S3).  S3 is a service"
echo "that allows users to store large datasets remotely and permanently over the"
echo "Internet.  S3 is also a convenient place to store data for use with software"
echo "that runs on Amazon's Elastic Compute Cloud (EC2) utility-computing service."
echo "Once this script completes successfully, the EC2-enabled version of Crossbow"
echo "can be used to align and call SNPs from the preprocessed data in S3."
echo
echo "Data stored in S3 is subject to Amazon's and Service Level Agreement (SLA) and"
echo "AWS Customer Agreement. See:"
echo "   http://aws.amazon.com/agreement/"
echo " and"
echo "   http://aws.amazon.com/s3-sla/"
echo
read -p "Continue? [Y/n]: " CONT
if [ "$CONT" == "N" -o "$CONT" == "n" -o "$CONT" == "NO" -o "$CONT" == "no" ] ; then
	exit 0
fi

echo
echo "The copy manifest file lists locations of all of the files to be preprocessed"
echo "and copied to S3, along with MD5 checksums (or \"0\" where if the file's MD5"
echo "should not be checked).  All lines are tab delimited.  Lines for unpaired-read"
echo "files have two entries: (1) path to file, and (2) optional MD5 checksum.  Lines"
echo "for paired-end read files have four entries: (1) and (2) are the path and MD5"
echo "checksum for the #1 mate file, (3) and (4) are the same for the #2 mate file."
echo "Source files may be located on a public FTP server, HTTP server, or S3 bucket,"
echo "or in a local directory.  Example:"
echo
echo "== begin =="
echo "ftp://ftp.yyy.edu/reads/seq_3_1.txt.gz 6983fd87d428ae3ed51ab72f33030c97 ftp://ftp.yyy.edu/reads/seq_3_2.txt.gz bfe020915e846ffa2607f21e05c800e8"
echo "ftp://ftp.yyy.edu/reads/seq_4_1.txt.gz 0 ftp://ftp.yyy.edu/reads/seq_4_2.txt.gz 0"
echo "ftp://ftp.yyy.edu/reads/seq_5.txt.gz 4167d5cefc96b96f6881b20cc36723ca"
echo "ftp://ftp.yyy.edu/reads/seq_6.txt.gz 0"
echo "http://www.yyy.edu/reads/seq_8.txt.gz a738b8394055d2a2161dc8d70e573899"
echo "http://www.yyy.edu/reads/seq_9.txt.gz 0"
echo "s3n://yyy-reads/seq_10.txt.gz 0a8841d11da1fd97847b659b40bc8083"
echo "s3n://yyy-reads/seq_11.txt.gz 0"
echo "== end =="
echo
read -p "Path to the copy manifest [./copy.manifest]: " MANIFEST_FILE
[ -z "$MANIFEST_FILE" ] && MANIFEST_FILE=./copy.manifest
[ ! -f "$MANIFEST_FILE" ] && echo "Manifest file $MANIFEST_FILE doesn't exist" && exit -1
ENTRIES=`grep -v '^[#]' $MANIFEST_FILE | wc -l | awk '{print \$1}'`
echo "Using manifest file $MANIFEST_FILE with $ENTRIES entries"

while true ; do
	echo
	echo "What type of Amazon EC2 node should perform the copy?"
	echo "Options:"
	echo "  (1) m1.small"
	echo "  (2) m1.large"
	echo "  (3) m1.xlarge"
	echo "  (4) c1.medium (recommended)"
	echo "  (5) c1.xlarge"
	NODE_TYPE=4
	read -p "Enter selection [Default: $NODE_TYPE]: " NODE_TYPE
	[ -z "$NODE_TYPE" ] && NODE_TYPE=4
	NODE_TYPE=`echo $NODE_TYPE | sed 's/1/m1.small/'`
	NODE_TYPE=`echo $NODE_TYPE | sed 's/2/m1.large/'`
	NODE_TYPE=`echo $NODE_TYPE | sed 's/3/m1.xlarge/'`
	NODE_TYPE=`echo $NODE_TYPE | sed 's/4/c1.medium/'`
	NODE_TYPE=`echo $NODE_TYPE | sed 's/5/c1.xlarge/'`
	echo "Using node type $NODE_TYPE"
	
	DEF_COPIES=
	[ "$NODE_TYPE" == "m1.small" ]  && DEF_COPIES=2
	[ "$NODE_TYPE" == "m1.large" ]  && DEF_COPIES=3
	[ "$NODE_TYPE" == "m1.xlarge" ] && DEF_COPIES=6
	[ "$NODE_TYPE" == "c1.medium" ] && DEF_COPIES=3
	[ "$NODE_TYPE" == "c1.xlarge" ] && DEF_COPIES=10
	[ -z "$DEF_COPIES" ] && echo "Bad node type: $NODE_TYPE" && exit -1
	COPIES=$DEF_COPIES 
	
	echo
	echo "How many worker nodes should be used?  Note that Amazon imposes a ceiling on the"
	echo "total number of nodes you can recruit.  The default ceiling is 20 nodes.  To"
	echo "request that the ceiling be lifted, fill out the form at"
	echo "http://aws.amazon.com/contact-us/ec2-request/"
	NUM_NODES=5
	read -p "Enter selection [Default: $NUM_NODES]: " NUM_NODES
	[ -z "$NUM_NODES" ] && NUM_NODES=5
	echo "Using $NUM_NODES nodes"

	echo
	echo "How many simultaneous copies should occur per node?"
	read -p "Enter selection [Default: $COPIES (recommended)]: " COPIES
	[ -z "$COPIES" ] && COPIES=$DEF_COPIES
	TOT_COPIES=`expr $COPIES \* $NUM_NODES`
	
	if [ $TOT_COPIES -gt $ENTRIES ] ; then
		echo "Warning: the total number of simultaneous copies ($TOT_COPIES) exceeds the"
		echo "number of input entires ($ENTRIES)."
		read -p "Continue anyway? [y/N]: " ANS
		[ -z "$ANS" -o "$ANS" == "N" -o "$ANS" == "n" -o "$ANS" == "NO" -o "$ANS" == "no" ] && continue
	else
		echo "$NUM_NODES nodes will perform a total of $TOT_COPIES simultaneous copies"
	fi
	break
done

MAX_READS=
echo
echo "What is the maximum # of reads allowed per output file?  Set to 0 for no"
echo "limit, i.e., one output file per input file."
read -p "Enter selection [Default: 2000000]: " MAX_READS
[ -z "$MAX_READS" ] && MAX_READS=2000000

while true ; do
	echo
	echo "What is the name of the S3 bucket to copy to? (This name must be unique)"
	S3_BUCKET=""
	read -p "Enter selection: " S3_BUCKET
	if [ -z "$S3_BUCKET" ] ; then
		echo "You must enter a bucket name"
		continue
	fi
	echo "Using S3 bucket with name $S3_BUCKET"
	break
done

echo
echo "What bucket subdirectory would you like to copy to?"
S3_DIR=""
read -p "Enter selection: " S3_DIR
echo "Copying to s3n://$S3_BUCKET/$S3_DIR"

while true ; do
	CLUSTER_NAME=
	CLUSTER_NAME_DEF="crossbowcopy$AWS_ACCOUNT_ID"
	CLUSTER_NAME_DEF=`echo $CLUSTER_NAME_DEF | sed 's/[^0-9a-zA-Z]//g'`
	echo
	echo "What name would you like to give to the copy cluster?"
	echo "  Use only letters and numbers.  The name must be globally unique, so please"
	echo "  include your AWS account ID or other identifier somewhere in the name."
	read -p "Enter selection [Default: $CLUSTER_NAME_DEF]: " CLUSTER_NAME
	[ -z "$CLUSTER_NAME" ] && CLUSTER_NAME=$CLUSTER_NAME_DEF
	
	echo
	echo "Checking if that cluster name is already being used..."
	HOST=`ec2-describe-instances | awk '"RESERVATION" == $1 && "'$CLUSTER_NAME-master'" == $4, "RESERVATION" == $1 && "'$CLUSTER_NAME-master'" != $4'`
	HOST=`echo "$HOST" | awk '"INSTANCE" == $1 && "running" == $6 {print $4}'`
	
	if [ ! -z "$HOST" ]; then
		echo "Master for cluster $CLUSTER_NAME is already running on: $HOST"
		continue
	fi
	echo "OK, Cluster with name $CLUSTER_NAME does not yet exist"
	break
done

echo
echo "The full command is:"
echo "bash $d/cb-copy-local -n $NUM_NODES -i $MANIFEST_FILE -o s3n://$S3_BUCKET/$S3_DIR -m $COPIES -t $NODE_TYPE -c $CLUSTER_NAME -M $MAX_READS" | tee .cb-copy-interactive.cmd

echo
read -p "Execute this command now? [Y/n]: " NOW
if [ -z "$NOW" -o "$NOW" == "Y" -o "$NOW" == "y" -o "$NOW" == "YES" -o "$NOW" == "yes" ] ; then
	bash $d/cb-copy-local -n $NUM_NODES -i $MANIFEST_FILE -o s3n://$S3_BUCKET/$S3_DIR -m $COPIES -t $NODE_TYPE -c $CLUSTER_NAME -M $MAX_READS
fi
