.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.09)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GPT-BUILD 1"
.TH GPT-BUILD 1 "2006-01-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\fBgpt-build\fR \- Builds and installs \s-1GPT\s0 source packages and bundles.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBgpt-build\fR [options] [macros] [source packages] flavors ...
.PP
.Vb 10
\&  Options:
\&     \-verbose                          Print copious output
\&     \-help                             Print usage
\&     \-man                              Print man page.
\&     \-version                          Print GPT version.
\&     \-installdir=path_to_installation  Override $GLOBUS_LOCATION
\&     \-builddir=path_to_build directory Directory to unpack tarfiles
\&     \-logdir=log_file_directory        Directory for package logs
\&     \-srcdir=source_directory          Directory containing a source package
\&     \-static                           Build static executables
\&     \-force                            Force rebuilds
\&     \-update                           Rebuild if newer
\&     \-disable\-version\-checking         Ignore versions in package dependencies.
\&     \-std\-flavors                      Build all std flavors.
\&     \-all\-flavors                      Build all of the flavors
\&     \-coresrc                          Override installed globus_core pkg
\&     \-nosrc                            Only install the flavors
\&     [macro=value]                     Macro definitions
\&     [list of flavors to build]        Flavors that define the build options
\&     [list of source packages]         Tarfiles of source bundles or packages
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBgpt-build\fR Builds and installs software from source
distributions.  The script reads the build instructions for each
source distribution from a package metadata file called
pkg_data_src.gpt.  If no instructions are found the script uses the
default instructions described in \fIGrid::GPT::PkgMngmt::Build\fR.
.PP
Multiple packages can be built by passing in multiple i<\-srcdir>
arguments or multiple source packages and or bundles.  For now these
have to be passed in in dependent order ie. if package foo needs
package fee's headers to build then fee should come first.
.PP
gpt-build does not create binary packages as globus-build does.  This
is done by a seperate script called \fIgpt-pkg\fR.
.SH "FLAVORS"
.IX Header "FLAVORS"
Build flavors are character string labels that represent a set of
compiler and linker options defined during the building of the
globus_core package. Predefined flavors can be listed by using the
\&\fBglobus_flavor_configuration\fR script.  Packages can be built with any
installed flavor.  globus_core can only be built with pre-defined
flavors.  globus_core needs to be built by hand
(i.e. ./configure|make|make install) to install a custom build flavor.
.SH "FILES IN PGM PACKAGES"
.IX Header "FILES IN PGM PACKAGES"
Installed files such as executables that are found in pgm and
ptm_static packages will overwrite one another when multiple flavors
of the same package are built.  Thus only the files from the last
flavor built will be present after a gpt-build run. To preserve
multiple flavors of these files, they are automatically copied into
flavored subdirectories.  For example, the program
\&\f(CW$GLOBUS_LOCATION\fR/bin/foo will be copied into the location
\&\f(CW$GLOBUS_LOCATION\fR/bin/gcc32/shared if it was built with dynamically
with the gcc32 flavor.  These files are retrieved by \fIgpt-pkg\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-srcdir\fR" 8
.IX Item "-srcdir"
Specifies the where the source directory is.  This is used by
developers to build out of a repository..
.IP "\fB\-installdir\fR" 8
.IX Item "-installdir"
Specifies the where the install directory is.  This directory will be
where the targets are installed before being archived.  Note that this
directory needs contain the installation targets of all of the
packages which satisfy build dependencies in addition to the
installation targets of the package being built.  Because of this,
installation targets are not removed after the package is archived.
Because different flavors of program packages conflict with each
other, the last flavor built is the flavor of the installed files.
For each flavor, gpt-build makes a copy of each installed file in a
program package and puts the copy in a flavored subdirectory.
.IP "\fB\-builddir\fR" 8
.IX Item "-builddir"
Specifies the where the source tar files should be untarred and the
code is built.
.IP "\fB\-force\fR" 8
.IX Item "-force"
Tells \fBgpt-build\fR to rebuild a package even if it is already
installed.  The default behavior is to skip any packages that have
been built before.
.IP "\fB\-update\fR" 8
.IX Item "-update"
Tells \fBgpt-build\fR to build even if an older version is installed.
.IP "\fB\-verbose\fR" 8
.IX Item "-verbose"
Prints out all of the build messages.
.IP "\fB\-std\-flavors\fR" 8
.IX Item "-std-flavors"
Build the globus_core package with all of the flavor choices marked as
standard in the flavor configuration file.  All of the other packages
will be built with all of the flavors sucessfully installed by
globus_core.
.IP "\fB\-all\-flavors\fR" 8
.IX Item "-all-flavors"
Build the globus_core package with all of the flavor choices marked as
standard in the flavor configuration file.  All of the other packages
will be built with all of the flavors sucessfully installed by
globus_core.
.IP "\fB\-nosrc\fR" 8
.IX Item "-nosrc"
Just install the listed flavors.  Don't build any source code.
.IP "\fB\-coresrc\fR" 8
.IX Item "-coresrc"
Use this version of globus_core source rather than the one found in
\&\f(CW$GLOBUS_LOCATION\fR/etc/gpt/globus_core\-src.tar.gz.
.IP "\fB\-disable\-version\-checking\fR" 8
.IX Item "-disable-version-checking"
\&\s-1GPT\s0 1.x scripts neglected to check the version numbers of packages
during dependency checks.  Because of this \s-1GPT\s0 bundles were released
that have errors in their dependency data.  This flag is provided so
that these packages can still be used.  \fB\s-1NOTE\s0\fR that once this flag is
used, the version checking is disabled \fBpermanently\fR for the
installation pointed to by \f(CW$GLOBUS_LOCATION\fR.  This condition can only
be removed by deleting the file
\&\f(CW$GLOBUS_LOCATION\fR/etc/gpt/disable_version_checking.
.IP "\fB\-flavor\-cfg=FILE\fR" 8
.IX Item "-flavor-cfg=FILE"
Use the flavor configurations found in \s-1FILE\s0.  The default
configuration file is
\&\f(CW$GLOBUS_LOCATION\fR/etc/gpt/globus_flavor_labels.conf
.IP "\fB\-logdir=DIRECTORY\fR" 8
.IX Item "-logdir=DIRECTORY"
Store package logs of build messages in \s-1DIRECTORY\s0. This option also
sets \-verbose. The default directory is ./logs.
.IP "\fB\-help\fR" 8
.IX Item "-help"
Print a brief help message and exits.
.IP "\fB\-man\fR" 8
.IX Item "-man"
Prints the manual page and exits.
.IP "\fB\-version\fR" 8
.IX Item "-version"
Prints the version of \s-1GPT\s0 and exits.
.SH "MACROS"
.IX Header "MACROS"
Build macros are perl routines and variables that are used by
gpt-build while building packages.  These macros are embedded in
the build instructions part of the package's metadata file.  Some of
these macros can be set from the command line using the following
format:
.PP
.Vb 1
\&  <NAME>_GPTMACRO=\*(Aqnew value\*(Aq
.Ve
.PP
Note that even though this feature seems extremely flexible, it has
not been thoroughly tested mainly because the authors have not been
able to figure out what people will want to do with these macros.
Further details are found in the \fBGrid::GPT::PkgMngmt::BuildMacros\fR manpage.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIgpt\-pkg\fR\|(1) \fIgpt\-bundle\fR\|(1) \fIgpt\-install\fR\|(1) \fIBuildMacros\fR\|(3)
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Bletzinger <mbletzin.ncsa.uiuc.edu> and Eric Blau
<blau.mcs.anl.gov>
