.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.09)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Zlib 3"
.TH Zlib 3 "2006-01-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Zlib \- IO:: style interface to Compress::Zlib
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
With any version of Perl 5 you can use the basic \s-1OO\s0 interface:
.PP
.Vb 1
\&    use IO::Zlib;
\&
\&    $fh = new IO::Zlib;
\&    if ($fh\->open("file.gz", "rb")) {
\&        print <$fh>;
\&        $fh\->close;
\&    }
\&
\&    $fh = IO::Zlib\->new("file.gz", "wb9");
\&    if (defined $fh) {
\&        print $fh "bar\en";
\&        $fh\->close;
\&    }
\&
\&    $fh = IO::Zlib\->new("file.gz", "rb");
\&    if (defined $fh) {
\&        print <$fh>;
\&        undef $fh;       # automatically closes the file
\&    }
.Ve
.PP
With Perl 5.004 you can also use the \s-1TIEHANDLE\s0 interface to access
compressed files just like ordinary files:
.PP
.Vb 1
\&    use IO::Zlib;
\&
\&    tie *FILE, \*(AqIO::Zlib\*(Aq, "file.gz", "wb";
\&    print FILE "line 1\enline2\en";
\&
\&    tie *FILE, \*(AqIO::Zlib\*(Aq, "file.gz", "rb";
\&    while (<FILE>) { print "LINE: ", $_ };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Zlib\*(C'\fR provides an \s-1IO::\s0 style interface to Compress::Zlib and
hence to gzip/zlib compressed files. It provides many of the same methods
as the IO::Handle interface.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Zlib\*(C'\fR object. If it receives any parameters, they are
passed to the method \f(CW\*(C`open\*(C'\fR; if the open fails, the object is destroyed.
Otherwise, it is returned to the caller.
.SH "METHODS"
.IX Header "METHODS"
.IP "open ( \s-1FILENAME\s0, \s-1MODE\s0 )" 4
.IX Item "open ( FILENAME, MODE )"
\&\f(CW\*(C`open\*(C'\fR takes two arguments. The first is the name of the file to open
and the second is the open mode. The mode can be anything acceptable to
Compress::Zlib and by extension anything acceptable to \fIzlib\fR (that
basically means \s-1POSIX\s0 \fIfopen()\fR style mode strings plus an optional number
to indicate the compression level).
.IP "opened" 4
.IX Item "opened"
Returns true if the object currently refers to a opened file.
.IP "close" 4
.IX Item "close"
Close the file associated with the object and disassociate
the file from the handle.
Done automatically on destroy.
.IP "getc" 4
.IX Item "getc"
Return the next character from the file, or undef if none remain.
.IP "getline" 4
.IX Item "getline"
Return the next line from the file, or undef on end of string.
Can safely be called in an array context.
Currently ignores $/ ($INPUT_RECORD_SEPARATOR or \f(CW$RS\fR when English
is in use) and treats lines as delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
Get all remaining lines from the file.
It will \fIcroak()\fR if accidentally called in a scalar context.
.IP "print ( \s-1ARGS\s0... )" 4
.IX Item "print ( ARGS... )"
Print \s-1ARGS\s0 to the  file.
.IP "read ( \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0] )" 4
.IX Item "read ( BUF, NBYTES, [OFFSET] )"
Read some bytes from the file.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "eof" 4
.IX Item "eof"
Returns true if the handle is currently positioned at end of file?
.IP "seek ( \s-1OFFSET\s0, \s-1WHENCE\s0 )" 4
.IX Item "seek ( OFFSET, WHENCE )"
Seek to a given position in the stream.
Not yet supported.
.IP "tell" 4
.IX Item "tell"
Return the current position in the stream, as a numeric offset.
Not yet supported.
.IP "setpos ( \s-1POS\s0 )" 4
.IX Item "setpos ( POS )"
Set the current position, using the opaque value returned by \f(CW\*(C`getpos()\*(C'\fR.
Not yet supported.
.IP "getpos ( \s-1POS\s0 )" 4
.IX Item "getpos ( POS )"
Return the current position in the string, as an opaque object.
Not yet supported.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc,
\&\*(L"I/O Operators\*(R" in perlop,
IO::Handle,
Compress::Zlib
.SH "HISTORY"
.IX Header "HISTORY"
Created by Tom Hughes <\fItom@compton.nu\fR>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998\-2001 Tom Hughes <\fItom@compton.nu\fR>.
All rights reserved. This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
