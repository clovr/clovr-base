.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.09)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tar 3"
.TH Tar 3 "2006-01-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tar \- module for manipulation of tar archives.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Archive::Tar;
\&
\&  Archive::Tar\->create_archive ("my.tar.gz", 9, "/this/file", "/that/file");
\&  print join "\en", Archive::Tar\->list_archive ("my.tar.gz"), "";
\&
\&  $tar = Archive::Tar\->new();
\&  $tar\->read("origin.tar.gz",1);
\&  $tar\->add_files("file/foo.c", "file/bar.c");
\&  $tar\->add_data("file/baz.c","This is the file contents");
\&  $tar\->write("files.tar");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a module for the handling of tar archives.
.PP
Archive::Tar provides an object oriented mechanism for handling tar
files.  It provides class methods for quick and easy files handling
while also allowing for the creation of tar file objects for custom
manipulation.  If you have the Compress::Zlib module installed,
Archive::Tar will also support compressed or gzipped tar files.
.SS "Class Methods"
.IX Subsection "Class Methods"
The class methods should be sufficient for most tar file interaction.
.ie n .IP "create_archive ($file, $compression, @filelist)" 4
.el .IP "create_archive ($file, \f(CW$compression\fR, \f(CW@filelist\fR)" 4
.IX Item "create_archive ($file, $compression, @filelist)"
Creates a tar file from the list of files provided.  The first
argument can either be the name of the tar file to create or a
reference to an open file handle (e.g. a \s-1GLOB\s0 reference).
.Sp
The second argument specifies the level of compression to be used, if
any.  Compression of tar files requires the installation of the
Compress::Zlib module.  Specific levels or compression may be
requested by passing a value between 2 and 9 as the second argument.
Any other value evaluating as true will result in the default
compression level being used.
.Sp
The remaining arguments list the files to be included in the tar file.
These files must all exist.  Any files which don\e't exist or can\e't be
read are silently ignored.
.Sp
If the archive creation fails for any reason, \f(CW\*(C`create_archive\*(C'\fR will
return undef.  Please use the \f(CW\*(C`error\*(C'\fR method to find the cause of the
failure.
.IP "list_archive ($file, ['property', 'property',...])" 4
.IX Item "list_archive ($file, ['property', 'property',...])"
.PD 0
.IP "list_archive ($file)" 4
.IX Item "list_archive ($file)"
.PD
Returns a list of the names of all the files in the archive.  The
first argument can either be the name of the tar file to create or a
reference to an open file handle (e.g. a \s-1GLOB\s0 reference).
.Sp
If \f(CW\*(C`list_archive()\*(C'\fR is passed an array reference as its second
argument it returns a list of hash references containing the requested
properties of each file.  The following list of properties is
supported: name, size, mtime (last modified date), mode, uid, gid,
linkname, uname, gname, devmajor, devminor, prefix.
.Sp
Passing an array reference containing only one element, 'name', is
special cased to return a list of names rather than a list of hash
references.
.IP "extract_archive ($file)" 4
.IX Item "extract_archive ($file)"
Extracts the contents of the tar file.  The first argument can either
be the name of the tar file to create or a reference to an open file
handle (e.g. a \s-1GLOB\s0 reference).  All relative paths in the tar file will
be created underneath the current working directory.
.Sp
If the archive extraction fails for any reason, \f(CW\*(C`extract_archive\*(C'\fR
will return undef.  Please use the \f(CW\*(C`error\*(C'\fR method to find the cause
of the failure.
.IP "new ($file)" 4
.IX Item "new ($file)"
.PD 0
.IP "new ()" 4
.IX Item "new ()"
.PD
Returns a new Tar object. If given any arguments, \f(CW\*(C`new()\*(C'\fR calls the
\&\f(CW\*(C`read()\*(C'\fR method automatically, parsing on the arguments provided \fIread()\fR.
.Sp
If \f(CW\*(C`new()\*(C'\fR is invoked with arguments and the read method fails for
any reason, \f(CW\*(C`new()\*(C'\fR returns undef.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
.ie n .IP "read ($ref, $compressed)" 4
.el .IP "read ($ref, \f(CW$compressed\fR)" 4
.IX Item "read ($ref, $compressed)"
Read the given tar file into memory. The first argument can either be
the name of a file or a reference to an already open file handle (e.g. a
\&\s-1GLOB\s0 reference).  The second argument indicates whether the file
referenced by the first argument is compressed.
.Sp
The second argument is now optional as Archive::Tar will automatically
detect compressed archives.
.Sp
The \f(CW\*(C`read\*(C'\fR will \fIreplace\fR any previous content in \f(CW$tar\fR!
.IP "add_files(@filenamelist)" 4
.IX Item "add_files(@filenamelist)"
Takes a list of filenames and adds them to the in-memory archive.  On
MacOS, the path to the file is automatically converted to a Unix like
equivalent for use in the archive, and the file\e's modification time
is converted from the MacOS epoch to the Unix epoch.  So tar archives
created on MacOS with \fBArchive::Tar\fR can be read both with \fItar\fR on
Unix and applications like \fIsuntar\fR or \fIStuffit Expander\fR on MacOS.
Be aware that the file\e's type/creator and resource fork will be lost,
which is usually what you want in cross-platform archives.
.ie n .IP "add_data ($filename, $data, $opthashref)" 4
.el .IP "add_data ($filename, \f(CW$data\fR, \f(CW$opthashref\fR)" 4
.IX Item "add_data ($filename, $data, $opthashref)"
Takes a filename, a scalar full of data and optionally a reference to
a hash with specific options. Will add a file to the in-memory
archive, with name \f(CW$filename\fR and content \f(CW$data\fR. Specific
properties can be set using \f(CW$opthashref\fR, The following list of
properties is supported: name, size, mtime (last modified date), mode,
uid, gid, linkname, uname, gname, devmajor, devminor, prefix.  (On
MacOS, the file\e's path and modification times are converted to Unix
equivalents.)
.IP "remove (@filenamelist)" 4
.IX Item "remove (@filenamelist)"
Removes any entries with names matching any of the given filenames
from the in-memory archive. String comparisons are done with \f(CW\*(C`eq\*(C'\fR.
.ie n .IP "write ($file, $compressed)" 4
.el .IP "write ($file, \f(CW$compressed\fR)" 4
.IX Item "write ($file, $compressed)"
Write the in-memory archive to disk.  The first argument can either be
the name of a file or a reference to an already open file handle (be a
\&\s-1GLOB\s0 reference).  If the second argument is true, the module will use
Compress::Zlib to write the file in a compressed format.  If
Compress:Zlib is not available, the \f(CW\*(C`write\*(C'\fR method will fail.
Specific levels of compression can be chosen by passing the values 2
through 9 as the second parameter.
.Sp
If no arguments are given, \f(CW\*(C`write\*(C'\fR returns the entire formatted
archive as a string, which could be useful if you\e'd like to stuff the
archive into a socket or a pipe to gzip or something.  This
functionality may be deprecated later, however, as you can also do
this using a \s-1GLOB\s0 reference for the first argument.
.IP "extract(@filenames)" 4
.IX Item "extract(@filenames)"
Write files whose names are equivalent to any of the names in
\&\f(CW@filenames\fR to disk, creating subdirectories as necessary. This
might not work too well under \s-1VMS\s0.  Under MacPerl, the file\e's
modification time will be converted to the MacOS zero of time, and
appropriate conversions will be done to the path.  However, the length
of each element of the path is not inspected to see whether it\e's
longer than MacOS currently allows (32 characters).
.Sp
If \f(CW\*(C`extract\*(C'\fR is called without a list of file names, the entire
contents of the archive are extracted.
.IP "list_files(['property', 'property',...])" 4
.IX Item "list_files(['property', 'property',...])"
.PD 0
.IP "\fIlist_files()\fR" 4
.IX Item "list_files()"
.PD
Returns a list of the names of all the files in the archive.
.Sp
If \f(CW\*(C`list_files()\*(C'\fR is passed an array reference as its first argument
it returns a list of hash references containing the requested
properties of each file.  The following list of properties is
supported: name, size, mtime (last modified date), mode, uid, gid,
linkname, uname, gname, devmajor, devminor, prefix.
.Sp
Passing an array reference containing only one element, 'name', is
special cased to return a list of names rather than a list of hash
references.
.IP "get_content($file)" 4
.IX Item "get_content($file)"
Return the content of the named file.
.IP "replace_content($file,$content)" 4
.IX Item "replace_content($file,$content)"
Make the string \f(CW$content\fR be the content for the file named \f(CW$file\fR.
.SH "CHANGES"
.IX Header "CHANGES"
.IP "Version 0.20" 4
.IX Item "Version 0.20"
Added class methods for creation, extraction and listing of tar files.
No longer maintain a complete copy of the tar file in memory.  Removed
the \f(CW\*(C`data()\*(C'\fR method.
.IP "Version 0.10" 4
.IX Item "Version 0.10"
Numerous changes. Brought source under \s-1CVS\s0.  All changes now recorded
in ChangeLog file in distribution.
.IP "Version 0.08" 4
.IX Item "Version 0.08"
New developer/maintainer.  Calle has carpal-tunnel syndrome and cannot
type a great deal. Get better as soon as you can, Calle.
.Sp
Added proper support for MacOS.  Thanks to Paul J. Schinder
<schinder@leprss.gsfc.nasa.gov>.
.IP "Version 0.071" 4
.IX Item "Version 0.071"
Minor release.
.Sp
Arrange to \fIchmod()\fR at the very end in case it makes the file read only.
Win32 is actually picky about that.
.Sp
SunOS 4.x tar makes tarfiles that contain directory entries that
don\e't have typeflag set properly.  We use the trailing slash to
recognise directories in such tar files.
.IP "Version 0.07" 4
.IX Item "Version 0.07"
Fixed (hopefully) broken portability to MacOS, reported by Paul J.
Schinder at Goddard Space Flight Center.
.Sp
Fixed two bugs with symlink handling, reported in excellent detail by
an admin at teleport.com called Chris.
.Sp
Primitive tar program (called ptar) included with distribution. Usage
should be pretty obvious if you\e've used a normal tar program.
.Sp
Added methods get_content and replace_content.
.Sp
Added support for paths longer than 100 characters, according to
\&\s-1POSIX\s0. This is compatible with just about everything except \s-1GNU\s0 tar.
Way to go, \s-1GNU\s0 tar (use a better tar, or \s-1GNU\s0 cpio).
.Sp
\&\s-1NOTE:\s0 When adding files to an archive, files with basenames longer
      than 100 characters will be silently ignored. If the prefix part
      of a path is longer than 155 characters, only the last 155
      characters will be stored.
.IP "Version 0.06" 4
.IX Item "Version 0.06"
Added \fIlist_files()\fR method, as requested by Michael Wiedman.
.Sp
Fixed a couple of dysfunctions when run under Windows \s-1NT\s0. Michael
Wiedmann reported the bugs.
.Sp
Changed the documentation to reflect reality a bit better.
.Sp
Fixed bug in format_tar_entry. Bug reported by Michael Schilli.
.IP "Version 0.05" 4
.IX Item "Version 0.05"
Quoted lots of barewords to make \f(CW\*(C`use strict;\*(C'\fR stop complaining under
perl version 5.003.
.Sp
Ties to Compress::Zlib put in. Will warn if it isn\e't available.
.Sp
\&\f(CW$tar\fR\->\fIwrite()\fR with no argument now returns the formatted archive.
.IP "Version 0.04" 4
.IX Item "Version 0.04"
Made changes to write_tar so that Solaris tar likes the resulting
archives better.
.Sp
Protected the calls to \fIreadlink()\fR and \fIsymlink()\fR. \s-1AFAIK\s0 this module
should now run just fine on Windows \s-1NT\s0.
.Sp
Add method to write a single entry to disk (extract)
.Sp
Added method to add entries entirely from scratch (add_data)
.Sp
Changed name of \fIadd()\fR to \fIadd_file()\fR
.Sp
All calls to \fIcroak()\fR removed and replaced with returning undef and
setting Tar::error.
.Sp
Better handling of tarfiles with garbage at the end.
