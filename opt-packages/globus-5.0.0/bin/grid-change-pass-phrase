#!/bin/sh

# 
# Copyright 1999-2006 University of Chicago
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

#
# Change the pass phrase on a user's private key
#

if test -f ${GLOBUS_LOCATION:-/usr}/share/globus/globus-script-initializer; then
    . ${GLOBUS_LOCATION:-/usr}/share/globus/globus-script-initializer
elif test -f ${GLOBUS_LOCATION:-/usr}/libexec/globus-script-initializer; then
    . ${GLOBUS_LOCATION:-/usr}/libexec/globus-script-initializer
else
    echo "ERROR: Please set GLOBUS_LOCATION to the Globus installation directory before" 1>&2
    echo "running this script" 1>&2
    exit 1
fi
globus_source ${libexecdir}/globus-sh-tools.sh

PROGRAM_NAME=`echo $0 | ${GLOBUS_SH_SED-sed} -e 's|.*/||g'`

PROGRAM_VERSION=`echo '$Revision: 1.9 $'| ${GLOBUS_SH_SED-sed} -e 's|\\$||g' -e 's|Revision: \(.*\)|\1|'`

VERSION="6.4"

PACKAGE="globus_gsi_cert_utils"

DIRT_TIMESTAMP="1228152468"
DIRT_BRANCH_ID="1"

short_usage="$PROGRAM_NAME [-help] [-version] [-file private_key_file]"

long_usage () {
    ${GLOBUS_SH_CAT-cat} >&2 <<EOF

${short_usage}

   Changes the passphrase that protects the private key. Note that
   this command will work even if the original key is not password
   protected. If the -file argument is not given, the default location
   of the file containing the private key is assumed:

     -- The location pointed to by X509_USER_KEY
     -- If X509_USER_KEY not set, $HOME/.globus/userkey.pem

   Options
      -help, -usage    Displays usage
      -version         Displays version
      -file location   Change passphrase on key stored in the file at
                       the non-standard location 'location'.

EOF
}

globus_source $libexecdir/globus-args-parser-header $@

# SSL related need
if test -n "${GLOBUS_LOCATION}" -a -x ${bindir}/openssl; then
    SSLEAY=${bindir}/openssl;
else
    SSLEAY="openssl"
fi

if ! ${SSLEAY} version > /dev/null 2> /dev/null; then
    echo "Unable to locate openssl binary in $bindir or PATH" 1>&2
    exit 1
fi

# See http://www-unix.globus.org/toolkit/docs/4.0/admin/docbook/ch05.html#prewsaa-env-credentials
find_default_key()
{
    if [ -n "$X509_USER_KEY" ]; then
        echo "$X509_USER_KEY"
    elif [ -r "${HOME}/.globus/userkey.pem" ]; then
        echo "${HOME}/.globus/userkey.pem"
    elif [ -r "${HOME}/.globus/usercred.p12" ]; then
        echo "${HOME}/.globus/usercred.p12"
    else
        echo ""
    fi
}

key_format()
{
    testfile="$1"
    _format=''

    if test "$testfile" = ""; then
        :
    elif echo "$testfile" | grep '\.p12$' > /dev/null 2>&1 ; then
        _format=pkcs12
    elif echo "$testfile" | grep '\.pem$' > /dev/null 2>&1 ; then
        _format=x509
    elif grep -- '-----BEGIN' "$testfile" > /dev/null 2>&1 ; then
        _format="x509"
    else
        :
    fi

    echo $_format
}

private_key=""

if [ -n "$1" ]; then
    case "$1" in
	-file)
	    private_key="$2"
	    ;;
	--)
	    echo "" > /dev/null
	    ;;
	*)
	    globus_args_unrecognized_option "$1"
	    ;;
    esac
fi

if [ "$private_key" = "" ]; then
    private_key=`find_default_key`
fi

if [ "$private_key" = "" ]; then
    echo "Unable to determine private key location. Use -file KEYFILE option"
    exit 1
fi

keyform="`key_format \"$private_key\"`"

if [ "$keyform" = "" ]; then
    echo "Unable to determine format of private key \"$private_key\"."
    exit 1
fi

umask 077
if [ "$keyform" = pkcs12 ]; then
    ${GLOBUS_SH_RM-rm} -f ${private_key}.new
    "${SSLEAY}" pkcs12 -in "${private_key}" -nodes | \
        ${SSLEAY} pkcs12 -export -out ${private_key}.new
else
    ${GLOBUS_SH_RM-rm} -f ${private_key}.new
    ${SSLEAY} rsa -des3 -in ${private_key} -out ${private_key}.new
fi

if [ $? -eq 0 ]; then
    ${GLOBUS_SH_RM-rm} -f ${private_key}.old
    ${GLOBUS_SH_CP-cp} -p ${private_key} ${private_key}.old
    ${GLOBUS_SH_MV-mv} -f ${private_key}.new ${private_key}
else
    echo "Failed to change passphrase" >&2
    exit 1
fi
