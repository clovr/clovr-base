#!/opt/opt-packages/bioinf-v1r4b1/AMOS//bin/runAmos -C

# this is where Celera Assembler is installed
CAPATH = /fs/sz-user-supported/Linux-i686/CA3.06

# this is where support scripts are installed
BIN = /fs/sz-user-supported/common/bin

# this is how much memory your machine has (used by the overlapper)
# allowable values: 256MB, 1GB, 2GB, 4GB, 8GB
MEM = 2GB

# this is how many overlapper threads you can allow
# set it to number of processors on your machine
NPROC = 2

# do bubble smoothing (say yes if you expect haplotype differences)? 
# 1 = yes, 0 = no
BUBBLE = 1

# unitigger error rate (0.002 for good quality reads, 0.015 default)
ERATE = 0.015

# minimum A-stat considered unique DNA 
# default 1, -20 used for metagenomic data
ASTAT = 1

# rocks aggresivity (number of rounds of rock recruitment)
# 4 is usually used.  5 is more aggressive
ROCKS = 5

#---Getting down to business---#

# make sure we accept runCA file.frg as well as runCA file
PREF = $(strip .frg PREFIX)
INPUTS = $(PREF).frg
TEMPS = $(PREF).inp $(PREF).ovl $(PREF).erate $(PREF).ofg $(PREF).ofglist $(PREF).cgb $(PREF).cgw $(PREF).cgw_contigs $(PREF).cgw_scaffolds $(PREF).cgw_total $(PREF).cns $(PREF).map $(PREF).ign $(PREF).err $(PREF).range $(PREF).corr $(PREF).cgb_chimeras $(PREF).cgb_crappies $(PREF).cgi $(PREF).cgi.clg $(PREF).cns.clg $(PREF).cus.0 $(PREF).cam $(PREF).cam.0 $(PREF).cga.0 $(PREF).stderr $(PREF).timing $(PREF).fgv $(PREF).fge $(PREF).dregs.cam $(PREF).asm.cam

## Running the gatekeeper
10: $(CAPATH)/gatekeeper -X -C -N -Q -P -f $(PREF).gkpStore $(PREF).frg

## Populating FRG store
20: $(CAPATH)/PopulateFragStore -P -c -f -o $(PREF).frgStore -V $(PREF).ofg $(PREF).inp

## Running meryl
30: $(CAPATH)/meryl -m 22 -n 100 -s $(PREF).frgStore -o $(PREF).mers

## Running overlapper
40: $(CAPATH)/overlap -M $(MEM) -z -P -w -h 1- -r 1- -t $(NPROC) -k $(PREF).mers -o $(PREF).ovl $(PREF).frgStore

## Populating overlap store
50: $(CAPATH)/grow-olap-store -cfS -o $(PREF).ovlStore $(PREF).ovl

## Correct frags
60: $(CAPATH)/correct-frags -k 9 -S $(PREF).ovlStore -x 1 -o $(PREF).corr $(PREF).frgStore 1 end

## Correct Olaps
70: $(CAPATH)/correct-olaps -S $(PREF).ovlStore -e $(PREF).erate $(PREF).frgStore $(PREF).corr 1 end

## Update Erates
80: $(CAPATH)/update-erates $(PREF).ovlStore $(PREF).erate

## Dump OlapStore
90: $(CAPATH)/dump-olap-store $(PREF).ovlStore > $(PREF).overlaps

LASTFRG = $(shell $(CAPATH\)/lastfraginstore $(PREF\).frgStore | sed 's/.* = //')
THREETIME = $(shell expr 3 '*' $(LASTFRG\))

## Running unitigger
100:
echo $(PREF).ofg > $(PREF).ofglist
$(CAPATH)/unitigger -c -P -A 1 -n$(LASTFRG) -m $(THREETIME) -d 1 -x 1 -z 10 -j 5 -U $(BUBBLE) -e $(ERATE) -F $(PREF).frgStore -f -o $(PREF).fgbStore -L $(PREF).ofglist -I $(PREF).ovlStore
.

## Running unitig consensus
110: $(CAPATH)/consensus -U $(PREF).frgStore $(PREF).cgb

## Running scaffolder
120: 
$(CAPATH)/cgw -j $(ASTAT) -k 5 -r $(ROCKS) -s 2 -w 0 -T -P -f $(PREF).frgStore -g $(PREF).gkpStore -o $(PREF) $(PREF).cgi
cat $(PREF).cgw $(PREF).cgw_contigs $(PREF).cgw_scaffolds > $(PREF).cgw_total
.

## Running scaffold consensus
130: $(CAPATH)/consensus $(PREF).frgStore $(PREF).cgw_total

## Terminator
140: $(CAPATH)/terminator -P -g $(PREF).gkpStore -f $(PREF).frgStore -i $(PREF).cns -o $(PREF).asm -m $(PREF).map

## Obtain assembly statistics
150: $(BIN)/castats $(PREF).asm
