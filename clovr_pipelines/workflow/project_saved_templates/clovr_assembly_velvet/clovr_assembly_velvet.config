## Configuration file for Illumina Microbe
#########################################################
## Input information.
## Configuration options for the pipeline.
#########################################################

## The following are for the various input types that velvet can take
## 
## Should a comma separated list of TAGS (you will have to tag them before running
## the wrapper). For paired end input, pipeline expects multiple files, both tagged
## together. For example: 
## tagData.py --name local --tag-name paired_end_illumina s_2_1_sequences.fastq s_2_2.sequences.fastq
[input]
SHORT_PAIRED_FILES=none
LONG_PAIRED_FILES=none

SHORT_FILES=none
LONG_FILES=none

## pipeline name
## if pipeline is already present, will simply monitor it
## otherwise will create the pipeline with current settings
PIPELINE_NAME=illumina_assembly_annotation

## The hash length to start velvet optimiser with
## Must be an odd number, less than end hash length and
## 19 < x < 31
START_HASH_LENGTH=19

## The hash length of the last iteration of optimiser
## Must be odd, greater than start hash length and 
## 19 < x < 31
END_HASH_LENGTH=31

## Other options sent to velvetg
## If using paired end reads, use AT LEAST -ins_length and -ins_length_sd.
## -min_contig_lgth is already set.
VELVETG_OPTS=-ins_length 300 -ins_length_sd 50

## This is used for uploading the tags specified above
## Don't change this.
INPUT_TAGS=$;SHORT_PAIRED_FILES$;,$;LONG_PAIRED_FILES$;,$;SHORT_FILES$;,$;LONG_FILES$;

##########################################################
## Cluster info.
## If the cluster_tag is present, the script will first
## check for the presence of this cluster and if it's not
## running will start a cluster with the default settings
##########################################################
[cluster]
CLUSTER_NAME=local
EXEC_NODES=1
CLOVR_CONF=clovr.conf
CLUSTER_CREDENTIAL=ec2

#key=/mnt/devel1.pem
#host=localhost

#########################################################
## Output info.
## Specifies where locally the data will end up and also
## logging information
#########################################################
[output]
OUTPUT_DIRECTORY=/mnt/output
log_file=/mnt/prok_run.conf.log
## the higher, the more output (3 = most verbose)
debug_level=3


[pipeline]
PIPELINE_TEMPLATE=clovr_assembly_velvet
PIPELINE_ARGS=--SHORT_PAIRED_LIST=${input.SHORT_PAIRED_FILES} --LONG_PAIRED_LIST=${input.LONG_PAIRED_FILES} --SHORT_INPUT_LIST=${input.SHORT_FILES} --LONG_INPUT_LIST=${input.LONG_FILES} --conf=${cluster.CLOVR_CONF} --START_HASH_LENGTH=${input.START_HASH_LENGTH} --END_HASH_LENGTH=${input.END_HASH_LENGTH} --VELVETG_OPTS="${input.VELVETG_OPTS}"

#prestart,prerun,postrun are all run locally. Use noop.xml for no operation
#Prestart is run before cluster start
#Possible actions: tag input data and do QC metrics
PRESTART_TEMPLATE_XML=/opt/ergatis/docs/noop.xml
#Prerun is run after cluster start but before pipeline start
#Possible actions: tag and upload data sets to the cluster
PRERUN_TEMPLATE_XML=/opt/clovr_pipelines/workflow/project_saved_templates/clovr_assembly_velvet/clovr_assembly_velvet.prerun.xml
PRERUN_ITERATOR_XML=$;DOCS_DIR$;/clovrtag_upload.iterator.xml
#Postrun is run after pipeline completion and after downlaod data
#Possible actions: local a local database, web browser.reorganize data for local ergatis
POSTRUN_TEMPLATE_XML=/opt/ergatis/docs/noop.xml


